fragment_downloaded_cb({"url":"design/Plugins.html#the-trac-way","fragment":"The Trac way\nTrac is an enhanced wiki and issue tracking system for software\ndevelopment projects (http://trac.edgewall.org/), it has a consistent\npluggable architecture that it strikingly rensembles the one of the\nEclipse framework:\nThe main application exposes some entry points where plugin can plug\ninto. each entry point is characterized by a contract that both the\nplugin and the main application must subscrive in order to interact;\nthis contract takes the concrete form of an interface declared by the\nmain application and implemented by the plugin.\nEach plugin can implement multiple interfaces, in this way it extends\nmultiple aspects of the main application.\nEach entry point can be plugged by multiple plugins, thus the same\nfeature of the main application can be extended in multiple ways.\nPlugins can expose entry points themself, allowing them to be extended\nby other plugins.\nTrac plugins inherits from the “Component” class and are deployed as\npython eggs.\nThe whole application is designed to be modular and plugins can also be\ncreated to replace built-in components.\nTechnically, the most of the work is done in the core.py file which\ndeclares the following structures:\nTrac approach intruces a simple implementation for interfaces in python,\nan example code of how this architecture is used for creating plugins is\nreported in the following example (taken from Trac documentation):\nITodoObserver interface provides a todo_added() callback to trigger\nplugin's functionalities.\nThe class TodoList is declared as expandable by declaring an extension\npoint, used by plugins that implements the ITodoObserver interface.\nFinally an example plugin TodoPrinter is written that extends the\nTodoList by implementing the interface ITodoObserver via the\nimplements() function.\n\nInterface class, defines the ancestor of all interfaces implemented\nby plugins using the implements() function\nExtensionPoint class, defines each single extension point slot,\ncharacterized by an Interface that every component who wants to plug\nmust conform.\nComponent class, defines the generical component boundled to an\nexinsing component manager\nComponentManager class, manages all the components available to the\napplication, switching them on/off and taking care each component is\na singleton.\n\n"});