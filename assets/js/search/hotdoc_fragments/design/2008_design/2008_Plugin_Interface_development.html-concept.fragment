fragment_downloaded_cb({"url":"design/2008_design/2008_Plugin_Interface_development.html#concept","fragment":"Concept\nA plugin needs to communicate in two ways, the main application needs to\nbe able to talk to plugin code (call methods and such) and plugin code\nneeds to be able to communicate back via some sort of API, currently\npitivi handles the first problem with zope interfaces which works\nnicely, the second problem is ignored, plugins must query pitivi's\ninternal code via pitivi.instance.PiTiVi which contains the programs\ninstance.\nThe problem with this direction is that any internal code changes will\nbreak plugin compatibility and further more it increases the difficulty\nof the casual user writing plugins as they are required to be intimately\nknowledgeable of pitivi's internal code.\nThe tried and tested solution to this problem is to develop a plugin\nAPI, the API will handle any communication from the plugin to pitivi by\nabstracting pitivi.instance.PiTiVi with a stable API. The plugin can\nthen make simple calls such as api.gui.add_menu_item(...) and be\nconfident that the API will not change from version to version.\n"});