fragment_downloaded_cb({"url":"design/2008_design/2008_Jog_and_Shuttle_controls_code_experiment.html#the-solution","fragment":"The Solution\nSo how can we correct x into z? We need to find the reverse method of f,\nlet's call it i. This means that x=f(z) and z=i(x). I first thought it\nmight be just a linear function, but that was not the case. So I\ndeveloped a frame correction algorithm which uses linear interpolation\nbetween known values of (x,f(x)) to predict (x,i(x)) or (x, z). You can\nfind the source code of this in the\npystreamer/player/frameMixin/Mixin.seek method. I've tested it with a\ncouple of videos with really bad codecs and it always seems to succeed.\nAs pitivi will be used by all kinds of end users, it is nice that they\ndon't have to worry about codecs or transcode it first in another codec.\nThe algorithm knows after two seeks if the codec is accurate or not. If\nit is accurate, it will show a success icon and the correction algorithm\ndisables itself. If it is incorrect, it will calculate and show a\nwarning sign. By clicking on the warning icon, you can optionally show\nthe incorrectness. The incorrectness is the average difference between\nseeked and queried positions in percent.\nOf course it makes seeking a bit more slow for inaccurate codecs, but\nthe speed remains acceptable. Moreover for video editing, frame\nstability/precision is more important than speed. (I guess because\ngstreamer is mainly used in media players not editors, speed was\nprioritized rather than precision.)\n"});