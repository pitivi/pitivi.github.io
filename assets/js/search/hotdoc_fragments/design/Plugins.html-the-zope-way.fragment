fragment_downloaded_cb({"url":"design/Plugins.html#the-zope-way","fragment":"The Zope way\nSince version 3.0 the CMS engine Zope (http://www.zope.org) introduced a\nfull fledged interface implementation in python, as core system for its\npluggable architecture.\nIn python the concept of interfaces, intended as a formal way to define\nrelationships between items, does not yet exist; instead duck typing is\nthe generally utilized way, so if an object hasattr(foo, 'bar') then\nfoo.bar(), but this approach goes so far, since it is not possible to\ndetermine if an attribute is callable or has constrains to its possible\nvalues.\nIn fact plugin developers must rely over documentation to check what\nmethods their classes have to provide to implement a certain feature,\nand this approach is very prone to broke plugins compatibility if\ndocumentation is not kept perfectly synchronized with the code.\nZope interfaces are designed to be applied not only to classes, but also\nto modules, objects and functions, since they follow the golden rule\nthat “specification should make no assumption about implementation”;\nthis approach leaves complete freedom to the plugin developer to\norganize its code in the way it prefers, as long the intefrace\nrequirements are fulfilled; in this way duck typing gets formalized\nwithout adding a big overhead.\nInterfaces fully supports inheritance from other interfaces (with the\nsecurity check that children's methods conforms to ancestor's one if\noverridden), implementer of an interface hierarchy can limit the\nimplementation only to a certain child interface in the lineage; the\nstatus of interface implementer can be attached at runtime to items that\ndo not explicitly implemented the interface in their definition; as\nwell the implementer status can be removed from an item at runtime\n(useful for example in containers that implement an interface by\ndelegating implementation to contained objects).\nThe other big feature of Zope interfaces is that they can be used to\ncreate adapters in a very efficient way, providing also a centralized\nregistry for adapters.\n"});