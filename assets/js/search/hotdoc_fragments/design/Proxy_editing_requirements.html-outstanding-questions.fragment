fragment_downloaded_cb({"url":"design/Proxy_editing_requirements.html#outstanding-questions","fragment":"Outstanding questions\n\nWhere to store the proxies? (beyond the obvious question of disk\nspace and tidiness, there's the question of people working across\nnetworks that raises interesting questions)\n\nIn pitivi we could default to the XDG user cache dir (which in\nthis case would turn out to be ~/.cache/pitivi/proxies/)\n...but Bassam insists that this can be overridden on a\nper-project basis. So in the project settings UI, we could have\na checkbox to “Use a custom directory to store proxies” that\nenables a gtk folder chooser button right besides it. Unchecking\nthe checkbox would clear the project's custom directory.\n\n\nFilenames of the actual proxy files depending on their location\n(global cache folder vs project folder?). For example, if a clip is\ncalled “foo.MOV”, should the proxies be called foo-360p.gesproxy, or\nfoo--proxy-360p.webm, or C462NTH353.webm in the hidden cache folder,\nor...?\nCodecs? So far we're hesitating between MJPEG and VP8. MJPEG is\nhandsdown the fastest codec to seek and to encode, since it is so\nsimple and every frame is a keyframe - however, the filesize is\nrather big. VP8 is more configurable and can be made to approximate\nMJPEG's seeking performance, but it is significantly more expensive\nto encode.\nResolutions, and how to handle aspect ratios. That is, how do you\ndetermine the appropriate resolution depending on the aspect ratio\nand resolution of the source material?\n\nGoing with a hardcoded percentage (ex: 50% of the original's\nresolution) can be bound to fail in scenarios where the original\nhas a huge native resolution (such as 4K).\nAlternatively, one can imagine a hardcoded (or configurable)\n“max resolution”, where clips bigger than that resolution will\nhave proxies created to “fit the box” (in terms of width and\nheight, whichever comes first). Hardcoding the box resolution\nmight be problematic as computers become more powerful and\nscreen resolutions increase.\nIdeally, we need a clever algorithm to figure out all of this\nautomatically. Any rough ideas of the logic here? Let us know.\nSolutions where the software can be smart enough to figure the\noptimal resolution to use, instead of having the user deal with\nit, are preferred.\n\n\nHandling “tarball export” in Pitivi\n\n\nIn pitivi we could default to the XDG user cache dir (which in\nthis case would turn out to be ~/.cache/pitivi/proxies/)\n...but Bassam insists that this can be overridden on a\nper-project basis. So in the project settings UI, we could have\na checkbox to “Use a custom directory to store proxies” that\nenables a gtk folder chooser button right besides it. Unchecking\nthe checkbox would clear the project's custom directory.\n\n\nGoing with a hardcoded percentage (ex: 50% of the original's\nresolution) can be bound to fail in scenarios where the original\nhas a huge native resolution (such as 4K).\nAlternatively, one can imagine a hardcoded (or configurable)\n“max resolution”, where clips bigger than that resolution will\nhave proxies created to “fit the box” (in terms of width and\nheight, whichever comes first). Hardcoding the box resolution\nmight be problematic as computers become more powerful and\nscreen resolutions increase.\nIdeally, we need a clever algorithm to figure out all of this\nautomatically. Any rough ideas of the logic here? Let us know.\nSolutions where the software can be smart enough to figure the\noptimal resolution to use, instead of having the user deal with\nit, are preferred.\n\n"});