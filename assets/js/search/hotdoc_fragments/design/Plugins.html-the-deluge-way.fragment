fragment_downloaded_cb({"url":"design/Plugins.html#the-deluge-way","fragment":"The Deluge way\nDeluge is a bittorrent client written in python+gtk\n(http://www.deluge-torrent.org), it provides one of the most simple\nimplementation of a pluggable architecture:\nPlugins are stored in subdirectories of the ./plugin path. Each\nsubdirectory takes the name of the contained plugin. Each plugin should\nat least provide an __init__.py file which defines the custom\nnamespace and provides the access points for the plugin.\nInside the __init__.py are stored:\nThe plugin manager scans the plugin directory for new items and when a\nplugin is found, it imports the namespace into the list of plugins and\ncalls the deluge_init() function to initialize the plugin.\nThis implementation has the major advantage of being lightweight.\nIt does not create a class hierarchy for plugins: this can be both an\nadvantage and an handicap since changes in the common base plugin class\nwould potentially break plugin's compatibility but having a common\nancestor can simplify usual operation by defining them inside the\nancestor.\nIt is not possible to categorize plugins, even if a simple “category”\nfield inside the __init__.py would be enough.\nThis plugin architecture is useful for extending the application with\nfunctionality not considered in the core objects, since the plugin has\nfull control over the application and can thus extend any aspect of the\nhost.\n\nDescription fields (plugin's name, author, version and description)\ndeluge_init() function is called to initialize the plugin\nenable() function is called when the user enables the plugin\n\n"});