fragment_downloaded_cb({"url":"Updating_git_hooks.html#page-description","fragment":"When you enter the development environment, our\npre-commit.hook\nscript is symlinked in your local git repository as\n.git/hooks/pre-commit.\nThen when you make a git commit, the following happens:\nThe pre-commit.hook script runs the (confusingly named) pre-commit tool\ninstalled in the sandbox.\nThe pre-commit tool runs the hooks configured in\n.pre-commit-config.yaml\nSooner or later you'll want to update the pre-commit framework and the hooks.\nThe .pre-commit-config.yaml file contains a list of \"repos\" and which of their\n\"hooks\" to be run. The repos are automatically downloaded by the pre-commit\ntool and the hooks are executed each in their own own virtualenv.\nNotice there is also the local repo which contains the pylint hook. This\nresults in pylint being executed directly. If pylint runs in a virtualenv\nit won't have access to the Python environment in our flatpak sandbox.\nFunny the example in the local hooks\ndocumentation is about\npylint.\nAs described in the flatpak documentation about Python\napps, we use the \nWhen updating the hooks, you need to validate the entire codebase and fix all\nthe errors.\n\n\nThe pre-commit.hook script runs the (confusingly named) pre-commit tool\ninstalled in the sandbox.\n\n\nThe pre-commit tool runs the hooks configured in\n.pre-commit-config.yaml\n\n\n"});