fragment_downloaded_cb({"url":"GSoC_Ideas.html#page-description","fragment":"\nTo apply for a GSoC internship you need to make a project proposal. The scope\nof your GSoC project will probably cover only Pitivi, but it could very well\nspan multiple codebases:\nWe'd love to see GSoC proposals originating from an itch you need to scratch.\nYou are welcome to ask around and bring your own ideas. If you're not sure\nwhere you can be most useful, have a look at our list of ideas below. These\nshall be used as a base for writing a detailed project proposal.\nSee Past GSoCs for details on what the previous GSoC students did.\nTo create a detailed proposal, use our GSoC application template.\nDeadlines for applying are approaching fast, hurry up!\nThe most tedious process of video editing is the initial cutting and structuring\nof the global timeline. A new perspective similar to the\nEditorPerspective\nwill offer a second timeline\nrepresentation above the\ntimeline, that is always zoom-fitted.\nRequirements: Python. Minimal experience contributing to Pitivi including\nunit tests.\nFixing timeline issues and making small enhancements would improve a lot the\ntimeline usability, making it a delight to use Pitivi. See\nGitLab.\nRequirements: Python. Minimal experience contributing to Pitivi including\nunit tests.\nOften people want to pick a nice tune and then sync their weekend clips on it.\nTo make this easy, Pitivi can detect the beats using a 3rd party library such as\nlibrosa and allow aligning and cutting the clips to the\nbeat. It might sound easy, but the entire experience should be super-polished so\nit works nice and everybody can do it.\nRequirements: Python, C. Minimal experience contributing to Pitivi including\nunit tests.\nFor end credits and other\nadvanced text display, we could use the new GStreamer\nWPE element in\ngst-plugins-bad,\nwhich can display an HTML page as a video element. As GstWPE is a live source it\ndoes not allow seeking (getting frames at random positions), we have to add\nlogic in Pitivi for seamlessly creating a video file out of an animated HTML\npage. The resulting file can be used in the project timeline as any other video\nclip. You'd have to extend the UI with a new\nperspective\nfor managing the closing credits HTML, and the corresponding video files.\nRequirements: Python. Minimal experience contributing to Pitivi including\nunit tests.\nGStreamer has pretty good GPU support through the OpenGL set of plugins, but\nPitivi/GES is not able to take full advantage of that infrastructure yet, mainly\nbecause of lack of testing and bug fixing on our side. This project is about\nenabling GL plugins for compositing and rendering, and fixing any issue that\nshows up. The second part would be about making sure hardware accelerated\ndecoders can be used in the pipelines.\nRequirements: C. Experience with GStreamer is mandatory. Minimal experience\ncontributing to Pitivi including unit tests. Experience with OpenGL is a plus.\nInitially the development environment should be migrated onto a GTK 4 runtime\nand then the app should be ported following the migration\nguide.\nRequirements: Python. Minimal experience contributing to Pitivi including\nunit tests. Experience developing GTK apps is a plus.\n\n\nPitivi, which is the user interface. Written in Python. For those\nwho love design and graphical user interaction.\n\n\nGES, the high-level video editing GStreamer library that powers\nPitivi and other applications. Written in C. For those who wish to\nimprove an easy to use, powerful and flexible library for\naudio/video editing.\n\nGStreamer, for low-level work, such as improving filters/effects,\ncodecs, hardware decoding/encoding acceleration, analysis, etc.\nWritten in C. For those seeking a challenging audio and video\nexperience where optimization is key.\n\n\n"});