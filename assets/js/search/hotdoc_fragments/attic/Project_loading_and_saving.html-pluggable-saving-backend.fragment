fragment_downloaded_cb({"url":"attic/Project_loading_and_saving.html#pluggable-saving-backend","fragment":"Pluggable Saving Backend\nOne goal of PiTiVis is to work work with a wide variety of project file\nformats.\nThe ProjectSaver class coordinates the work of saving, loading, and\nvalidating project data. The class works with an intermediate format\nwhich concisely represents the project. Everything contained within a\nproject (sources, transitions, effects, compositions, settings, etc)\nmust implement the Serializable interface, which includes the\ntoDataFormat() and fromDataFormat() methods. These methods convert\nto and from this intermediate format.\nMultiple file formats can be supported by sub-classing ProjectSaver\nThese classes must provide dump() and load() methods for the file\nformat they implement. Users of the ProjecSaver's public interface can\nuse the methods saveToFile(), openFrom File, listFormats(), and\nnewProjectSaver. These methods are summarized in the following table:\nThe following example assumes the following:\nOf these sources, only 4 have been added to the timeline (time-stamps\ngiven in h:mm:ss.sss):\nIn this example, media-duration and timeline duration correspond. This\nis not necessarily the case, however.\nThe equivalent python data structure will look like this (currently\nincomplete):\nMore specifically, the project is composed python dictionaries, tuples,\nand strings. It could be thought of as a “tree” but it is really more of\na “deep dictionary,” with several levels of nesting. Each dictionary\ncontains a key called “datatype” which identifies what the kind of\nobject it is. Optional keys are not required to exist, but you must\nhandle them if they do.\n\nThere are 5 media sources located in the same directory as the\nproject\n\nThree video files video1.ogm, video2.ogm, and video4.ogm\n\nTwo audio files audio1.ogg, and audio2.ogg\n\n\n\nThe project output format is 320x240 resolution, 15fps video and\n\n\nThree video files video1.ogm, video2.ogm, and video4.ogm\n\nTwo audio files audio1.ogg, and audio2.ogg\n\n\n\nvideo1.ogm:\n\nmedia-start: 0:00:02:0.000\nmedia-duration: 0:00:37.000\nstart: 0:00:00.000\nduration: 0:00:37.000\n\n\nvideo2.ogm:\n\nmedia-start: 0:00:00:0.000\nmedia-duration: 0:00:30.242\nstart: 0:00:00.37.000\nduration: 0:00:30.242\n\n\nvideo1.ogm:\n\nstart: 0:01:7.242\nduration: 0:00:20.0\nmedia-start: 00:30:00.000\nmedia-duration: 00:00:20.0\n\n\naudio1.ogm\n\nmedia-start: 00:00:00.000\nmedia-duration: 00:01:27.242\nstart: 00:00:00.000\nduration: 00:01:27.242\n\n\naudio2.ogm:\n\nmedia-start: 0:00:00:00.000\nmedia-duration: 0:00:05.200\nstart: 0:00:45.127\nduration: 0:00:5.2\n\n\n\n\nmedia-start: 0:00:02:0.000\nmedia-duration: 0:00:37.000\nstart: 0:00:00.000\nduration: 0:00:37.000\n\n\nmedia-start: 0:00:00:0.000\nmedia-duration: 0:00:30.242\nstart: 0:00:00.37.000\nduration: 0:00:30.242\n\n\nstart: 0:01:7.242\nduration: 0:00:20.0\nmedia-start: 00:30:00.000\nmedia-duration: 00:00:20.0\n\n\nmedia-start: 00:00:00.000\nmedia-duration: 00:01:27.242\nstart: 00:00:00.000\nduration: 00:01:27.242\n\n\nmedia-start: 0:00:00:00.000\nmedia-duration: 0:00:05.200\nstart: 0:00:45.127\nduration: 0:00:5.2\n\n\n\n\nMethod Name\n\n\nparameters\n\n\npurpose\n\n\n\n\n`saveToFile`\n\n\n`tree, output_stream`\n\n\nwrite project data to file\n\n\n\n\n`openFromFile`\n\n\n`tree, output_stream`\n\n\nread project data from file\n\n\n\n\n`@classmethod newProjectSaver`\n\n\n`fmt` - string representing the project file format\n\n\nreturn a new projectSaver instance\n\n\n\n\n`@classmethod listFormats`\n\n\n\n\nreturn a list of strings representing project file formats\n\n\n\n"});