fragment_downloaded_cb({"url":"Precommit_hooks.html#page-description","fragment":"When you enter the development environment, our pre-commit.hook\nscript is\nsymlinked in your local git repository as .git/hooks/pre-commit, serving as\nthe Git pre-commit\nhook.\nWhen you make a git commit, the following happens:\nThe pre-commit.hook script runs the (confusingly named) pre-commit tool\nin the flatpak sandbox.\nThe pre-commit tool runs the hooks configured in\n.pre-commit-config.yaml\nSooner or later you'll want to update the pre-commit framework and its hooks.\nThe pre-commit tool is installed in the flatpak sandbox through\npython3-pre-commit.json.\nThe python3-pre-commit.json file is generated with flatpak-pip-generator.\nSee the instructions for updating the Python\ndependencies.\nThe .pre-commit-config.yaml file contains a list of \"repos\" and which of their\n\"hooks\" to be run. The repos are downloaded and cached by the pre-commit tool\nwhen you create a git commit.\nThese hooks are executed each in their own own virtualenv, with the\nexception of the ones in the local repo. Currently only the pylint hook is\nexecuted directly such that it runs in the sandbox. If pylint runs in a\nvirtualenv it would not have access to the Python environment in our flatpak\nsandbox.\nTo update pylint, follow the instructions for updating the Python\ndependencies.\nTo update the regular hooks, take the repos one by one, check what is the latest\nversion and update the entry in the .pre-commit-config.yaml file. After\nupdating the hooks, pay attention to validate the entire codebase and fix all\nthe errors.\nBest would be to update the repos one by one and run the corresponding hooks.\nFor example, I just updated the\nhttps://github.com/pre-commit/pre-commit-hooks.git repo to revision v3.4.0:\nTo run the check-yaml hook, I run:\n\n\nThe pre-commit.hook script runs the (confusingly named) pre-commit tool\nin the flatpak sandbox.\n\n\nThe pre-commit tool runs the hooks configured in\n.pre-commit-config.yaml\n\n\n"});