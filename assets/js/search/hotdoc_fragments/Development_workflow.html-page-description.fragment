fragment_downloaded_cb({"url":"Development_workflow.html#page-description","fragment":"We use GitLab to track\nall bugs and feature requests. Most of the time, you announce you are\nworking on an issue, work on it until it's fixed, and then the issue is\nclosed automatically when a commit with \"Fixes #issue_number\" is merged.\nInterested users can enable notifications for an existing issue to\nget an email when it's updated. It's also possible to change your\n\"Notification settings\" for\npitivi from the default\n\"Global\" to \"Watch\", to receive notifications for any activity in the\nentire project.\nTo get involved, start with issues tagged\n4. Newcomers.\nIt's best to get in touch with us in our chat\nroom, to see if it's still meaningful, etc.\nOnce you decide, add a comment on the issue saying you're working on it.\nNext is the fun part where you implement your cool feature, or fix an\nannoying bug:\nCreate a new branch with a relevant name in your local git repository.\nOnce you have made your changes, commit them in your local git\nrepository. Follow the GNOME\nguidelines\nfor creating commits.\nBe aware that when you create a commit, pre-commit is executed to\nperform checks on the changes. In some cases it does some automatic\nfixes â€“ when this happens, make sure those are included in the commit\nyou want to create.\nPatches are proposed by creating a merge request in GitLab.\nTo do this, you need your own Pitivi repo on GNOME's\nGitLab. Start by creating an account. Then go\nto\ngitlab.gnome.org/GNOME/pitivi\nand press the \"fork\" button. Make sure to be authenticated otherwise\nthe button won't be available.\nTo be able to push seamlessly to your remote fork, add your public ssh\nkey to GitLab.\nAdd the remote git repository you just forked as a \"remote\" to your\nlocal git repository:\nTo make a merge request, first push your branch to your fork:\nOpen the displayed URL in the browser and fill the form for creating a\nmerge request. Alternatively, go to\ngitlab.gnome.org/GNOME/pitivi\n> Merge Requests > New merge request.\nNote: Make sure to select \"Allow commits from members who can merge to\nthe target branch\". This way we'll be able to rebase the branch easily\nto be able to merge it in case it's behind origin/master.\nOne of the maintainers will review your changes and either merge your\nbranch, or comment and ask for changes.\nThe comments made by the reviewer have to be addressed by you:\nIf you disagree with a comment, reply how it's better differently.\nIf you agree with the requests for changes, implement the changes,\ncommit them and push your branch.\nMark the addressed comment threads as \"resolved\", unless there is a\ndisagreement. Finally, inform the reviewer when you are done!\nEverybody can see the merge request and comment on it. If you see an\ninteresting merge request, feel free to review it yourself.\nRun gitk main_file_you_changed.py to see how the commit messages\nare formatted and try to follow the model.\nBefore pushing, use gitk to have a quick look at your branch and\nreview your own changes.\nAvoid creating separate \"update\" commits. We don't need the full history\nof changes in the commit history. Consider squashing these in one of the\nprevious commits where it makes sense.\nIf you add some new logic and a unittest for it, the unittest should be\nincluded in the same commit as the tested logic.\n\n\nIf you disagree with a comment, reply how it's better differently.\n\n\nIf you agree with the requests for changes, implement the changes,\ncommit them and push your branch.\n\n\n"});