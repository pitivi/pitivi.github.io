fragment_downloaded_cb({"url":"release.html#making-a-release","fragment":"Making a release\nIdeally these instructions are in line with the GNOME releasing\nprocess.\nWe make two types of releases:\nThe regular releases have the version number YYYY.MM, and the bug-fix releases\nhave the version number YYYY.MM.Z, where Z is hopefully a relatively small\nnumber (1, 2, 3...).\nMost of the steps below should be done in the development\nenvironment:\nFreeze the strings\nCheck GitLab\nCheck your local dev env:\nMake sure your sandbox is using the latest GStreamer release:\nCheck there are no uncommitted changes:\nUpdate the following files:\nCommit the changes:\nCreate the distribution archive:\nOn an X system, ninja dist might not work because the unit tests fail\nbecause of X. In this case, stop X with sudo systemctl stop gdm and use a\nfake X server: xvfb-run /.../pitivi/build/flatpak/pitivi-flatpak ninja -C mesonbuild/ dist.\nInstall it on a real system and give it a spin. For example on Archlinux:\nCreate a tag and push it to the official repository. The TAG must always include the micro. This means when doing a regular release with version number YYYY.MM, the TAG is YYYY.MM.0. When doing a bug-fix release, the version number already includes a micro, so it's all fine.\nWe use tag YYYY.MM.0 instead of YYYY.MM because we want to have the option of\nlater creating the YYYY.MM branch to the official repository, since it's not\npossible to have both a tag and a branch with the same name. This branch\nwould gather backported fixes and be used for doing future YYYY.MM.Z bug-fix\nreleases.\nPublish the archive on Gnome:\nThe tarball will appear on\nhttps://download.gnome.org/sources/pitivi/YYYY.MM/pitivi-YYYY.MM.tar.xz\nSpread the word about the release\nUpdate the releases.txt file for the\napp's update notification feature in\npitivi-web.\nBump the Z in the version number in\nmeson.build,\nfor example if it was a regular release: 2020.09 -> 2020.09.1 or if it was a\nbug-fix release: 2020.09.1 -> 2020.09.2.\nPush to the official repo:\n\nregular releases, when we have new features or improvements, and\n\"smaller\" bug-fix releases, when a regular release needs patching.\n\n\nPost to gnome-i18n\nto inform the translators the strings have been frozen and that\nin one week the release will be cut.\nIt would be good to start preparing a blogpost already.\n\n\nMake sure there are no significant issues open against the current milestone.\nMove the remaining open issues somewhere else, for example to the next milestone.\nClose the current milestone.\n\n\n\nMake sure your sandbox is using the latest GStreamer release:\n$ ptvenv --update\n\n\n\nCheck there are no uncommitted changes:\n$ git status\n\n\n\n\n\nmeson.build:\nIf doing a bugfix release, make sure the micro (Z) from the version number has\nbeen increased. If doing a regular release, update the version number with the\ncurrent year and month and remove the micro, if any. Normally this is the\nsame as the name of the GitLab milestone you just archived.\n\nNEWS:\nCompose the exec summary of changes, at the top. This ends up in the .news\nfile at download.gnome.org/sources/pitivi.\n\ndata/org.pitivi.Pitivi.appdata.xml.in:\nRun appstream-util news-to-appdata NEWS and copy the generated content into\nthe appdata template.\n\nAUTHORS:\nIf there are new maintainers.\n\n\nSend an email to gstreamer-devel@lists.freedesktop.org\nReply to the connected string freeze post, expressing gratitude to the translators.\n\nArchlinux, click \"Flag Package Out-of-Date\".\n\nDebian, click the \"unstable\" Debian version and look for \"maintainer\".\n\nFedora, look for \"You can contact the maintainers of this package via email at\".\n\n"});